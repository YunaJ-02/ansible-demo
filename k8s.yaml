---
- hosts: cluster
  tasks:
    - name: Set selinux to permissive mode
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: false

    - name: disable swap
      shell: "swapoff -a"
      when: ansible_swaptotal_mb > 0

    - name: swap off on fstab
      mount:
        name: none
        fstype: swap
        state: absent

    - name: Load overlay and br_netfilter kernel module
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: configure sysctl for overlay and br_netfilter
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: yes
        sysctl_file: /etc/sysctl.d/k8s.conf
        state: present
        sysctl_set: yes
      with_items:
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: 1 }
        - { name: "net.bridge.bridge-nf-call-iptables", value: 1 }
        - { name: "net.ipv4.ip_forward", value: 1 }

    - name: install docker-ce.repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: add kubernets repo
      yum_repository:
       name: kubernets
       description: Kubernetes Repository
       baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
       enabled: yes
       gpgcheck: yes
       repo_gpgcheck: yes
       gpgkey: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key

    - name: Install containerd and kubeadm
      yum:
        name: "{{ item }}"
        state: latest
      loop:
        - containerd
        - kubeadm

    - name: copy config.toml
      copy:
       src: config.toml
       dest: /etc/containerd/config.toml

    - name: enable service containerd and kubelet
      service: 
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - containerd
        - kubelet

    - name: copy /etc/hosts
      copy:
        src: /etc/hosts
        dest: /etc/hosts

    - name: init cluster
      shell: |
        kubeadm init --apiserver-advertise-address=172.16.0.101 \
                     --pod-network-cidr=192.168.0.0/16 \
                     --token=kdigit.1234567890hellow

      when: inventory_hostname in groups['controlplanes']
      ignore_errors: yes

    - name: join cluster
      shell: |
        kubeadm join --token=kdigit.1234567890hellow \
                     --discovery-token-unsafe-skip-ca-verification \
                     172.16.0.101:6443

      when: inventory_hostname in groups['worker_nodes']
